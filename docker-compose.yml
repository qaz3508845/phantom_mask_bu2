version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: phantom_mask_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-phantom_mask}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - phantom_mask_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: phantom_mask_api
    env_file:
      - .env
    environment:
      # Docker 內部使用 postgres 作為 hostname
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-phantom_mask}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONPATH: /app
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
    networks:
      - phantom_mask_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  phantom_mask_network:
    driver: bridge